<style lang='less' scoped>
.noflex-layout {
  text-align: center;
  display: inline-block;
}
.header,
.footer {
  background-color: #ffffff;
  width: 100%;
  z-index: 999;
  justify-content: space-around;
  .btn {
    height: 100%;
  }
}
.header {
  position: fixed;
  top: 0;
  height: 80rpx;
  .btn {
    line-height: 68rpx;
    width: 372rpx;
  }
}
.footer {
  position: relative;
  z-index: 99999;
  height: 100rpx;
  margin-bottom: 20rpx;
  .btn {
    line-height: 104rpx;
    width: 249rpx;
  }
}
.cover-text {
  white-space: normal;
  width: 562rpx;
  position: absolute;
  padding: 40rpx;
  z-index: 9999;
  line-height: 50rpx;
  font-size: 32rpx;
}
.cover-input {
  padding: 40rpx;
  opacity: 0;
  width: 562rpx;
}
/*mask*/
.drawer_screen {
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  background: rgba(0, 0, 0, 0.5);
  overflow: hidden;
}
/*content*/
.drawer_box {
  width: 650rpx;
  overflow: hidden;
  position: fixed;
  top: 50%;
  left: 0;
  z-index: 1001;
  background: #fafafa;
  margin: -300rpx 50rpx 0 50rpx;
  border-radius: 6rpx;
}
.button-div {
  display: flex;
  justify-content: space-around;
  margin-top: 5rpx;
  // height: 70rpx;
  > view {
    flex: 5;
    padding: 10px;
    font: 20px 'microsoft yahei';
    text-align: center;
    border-top: 1px solid #e8e8ea;
  }
  .btn_no {
    width: 100%;
  }
  .btn_yes {
    width: 100%;
    color: #3cc51f;
  }
}
.vertical {
  height: 24rpx;
  width: 4rpx;
  background: rgba(0,0,0,.4);
  position: absolute;
  top: 38rpx;
  z-index: 9;
}
</style>
<template>
  <div>
    <cover-view v-if="is==='head'" class="noflex-layout header">
      <cover-view class="btn noflex-layout" @tap="action('preview')">预览</cover-view>
      <cover-view class="btn noflex-layout" @tap="action('save')">保存</cover-view>
    </cover-view>
    <cover-view v-else-if="is==='foot'&&!modelShow" class="noflex-layout footer">
      <cover-view class="btn noflex-layout" @tap="action('randomText')">随机一言</cover-view>
      <cover-view class="vertical" style="margin-left: 250rpx;"></cover-view>
      <cover-view class="btn noflex-layout" @tap="action('editBtn')">编辑开关</cover-view>
      <cover-view class="vertical" style="margin-left: 500rpx;"></cover-view>
      <cover-view class="btn noflex-layout" @tap="action('changePhoto')">更换背景</cover-view>
    </cover-view>

    <!-- <my-modal :show="modelShow" @changeModal="changeModal" title="编辑模式"> -->
    <view v-show="modelShow" class="drawer_screen">
      <view class="drawer_box">
        <textarea class="cover-input" placeholder="写点什么.." v-model="editing" auto-height :focus="focus"></textarea>
        <view class="button-div">
          <view v-for="(item, index) in modalData.button" :key="index" class="{{index == 0 ? 'btn_no' : 'btn_yes'}}"
            @tap="changeModal(index)">{{item}}</view>
        </view>
      </view>
    </view>
    <!-- <cover-view v-show="modelShow" class="drawer_screen">
      <cover-view class="drawer_box">
        <cover-view @tap="clickEdit" class="cover-text">{{editing}}</cover-view>
        <textarea class="cover-input" placeholder="写点什么.." v-model="editing" auto-height :focus="focus"></textarea>
        <cover-view class="button-div">
          <cover-view v-for="(item, index) in modalData.button" :key="index" class="noflex-layout {{index == 0 ? 'btn_no' : 'btn_yes'}}"
            @tap="changeModal(index)">{{item}}</cover-view>
        </cover-view>
      </cover-view>
    </cover-view> -->
    <!-- </my-modal> -->
  </div>

</template>
<script>
import wepy from '@wepy/core'
import eventHub from '@/utils/common/eventHub'
wepy.component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  props: {
    is: {},
    showModal: Boolean,
    text: String
  },
  data: {
    modelShow: false,
    focus: false,
    editing: '',
    modalData: {
      button: ['取消', '确定']
    }
  },
  computed: {},
  created() {},
  methods: {
    action(fn) {
      this.$emit('action', fn)
    },
    changeModal(index) {
      this.$emit('modalReturn', {
        index,
        text: this.editing
      })
    },
    // clickEdit() {
    //   this.focus = false
    //   setTimeout(() => {
    //     this.focus = true
    //   }, 100)
    // },
  },
  watch: {
    showModal(val) {
      if (val) {
        this.editing = this.text
      }
      this.modelShow = val
      setTimeout(() => {
        this.focus = val
      }, 100)
    }
  },
  mixins: []
})
</script>
<config>
{
  usingComponents: {
    
  }
}
</config>