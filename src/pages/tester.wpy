<template>

  <view @tap="showModal('viewModal')" class="bg-gradual-blue padding radius text-center shadow-blur daka-f-btn">
      <view class="text">打卡</view>
    </view>
  <view class="DrawerClose {{modalName=='viewModal'?'show':''}}" bindtap="hideModal">
    <text class="cuIcon-pullright"></text>
  </view>
  <scroll-view scroll-y class="DrawerWindow {{modalName=='viewModal'||modalName=='bottomModal'?'show':''}}">
    <view class="cu-list menu card-menu margin-top-xl margin-bottom-xl shadow-lg">
      <!-- 打卡界面 -->
      <view class="padding text-center">
        <view class="padding-lr bg-white">
          <view class="solid-bottom padding">Frog Clock Punch</view>
          <!-- <view class="padding">登录青蛙打卡继续操作</view> -->
          <view @tap="start()" class="margin radius bg-gradual-blue shadow-blur daka_start animation-{{animation}}">
            <text class="daka_text line-clamp-1">超时等候阿斯顿撒多就奥斯卡</text>
            <image src="/static/images/wave.gif" mode="aspectFill" class="gif-black response" style="height:100%;"></image>
          </view>
        </view>
      </view>
      <!-- 标签选择 -->
      <view @tap="showModal('viewModal')" class="cu-modal bottom-modal {{modalName=='bottomModal'?'show':''}}">
        <view catchtap="selectLabel" class="cu-dialog">
          <view class="cu-bar bg-white">选择执行任务</view>
          <view class="padding-xl">
            <view class="flex flex-wrap">
              <view class="padding-xs" wx:for="{{ColorList}}" wx:key wx:if="{{item.name!='white'}}">
                <view class="cu-tag line-{{item.name}}">{{item.title}}</view>
              </view>
            </view>
          </view>
        </view>
      </view>

      <!-- 登录界面 -->
      <form>
        <view class="cu-form-group margin-top">
          <view class="title">账号</view>
          <input placeholder="输入账号" />
        </view>
        <view class="cu-form-group margin-top">
          <view class="title">密码</view>
          <input type="password" placeholder="输入密码" />
        </view>
        <button class="cu-btn block bg-blue margin-tb-sm lg">
          <text v-if="loading" class="cuIcon-loading2 iconfont-spin"></text>
          <text v-else>登录</text>
        </button>
      </form>

      <view @tap="showModal('EndModal')">Test</view>
    </view>
    <!-- 打卡记录列表 -->
    <!-- <view class="cu-item arrow" wx:for="{{20}}" wx:key="index">
        <view class="content">
          <text class="cuIcon-github text-grey"></text>
          <text class="text-grey">{{index +1}}</text>
        </view>
      </view> -->
  </scroll-view>

  <!-- Testtetstetst -->
  <view class="cu-modal {{modalName=='EndModal'?'show':''}}">
    <view class="cu-dialog">
      <view class="cu-bar bg-white justify-end">
        <view class="content">结束任务: XXXXXX</view>
        <view class="action" bindtap="hideModal">
          <text class="cuIcon-close text-red"></text>
        </view>
      </view>
      <view class="padding-xl">
        <radio-group class="block">
          <view class="cu-form-group">
            <view class="title">作废该次打卡</view>
            <radio class="blue radio"></radio>
          </view>
          <view class="cu-form-group">
            <view class="title">自定义持续时间</view>
            <radio class="blue radio"></radio>
          </view>
        </radio-group>
      </view>
      <view class="cu-bar bg-white justify-end">
        <view class="action">
          <button class="cu-btn line-blue text-blue" bindtap="hideModal">取消</button>
          <button class="cu-btn bg-blue margin-left" bindtap="hideModal">确定</button>

        </view>
      </view>
    </view>
  </view>

</template>
 
<script>
import wepy from '@wepy/core';
// import eventHub from '@/utils/common/eventHub';
import store from '@/store';
// import testMixin from '@/mixins/test';
import api from '@/api'
import { vibrate } from '@/common/utils'
const ColorList = [{
  title: '嫣红',
  name: 'red',
  color: '#e54d42'
},
{
  title: '桔橙',
  name: 'orange',
  color: '#f37b1d'
},
{
  title: '明黄',
  name: 'yellow',
  color: '#fbbd08'
},
{
  title: '橄榄',
  name: 'olive',
  color: '#8dc63f'
},
{
  title: '森绿',
  name: 'green',
  color: '#39b54a'
},
{
  title: '天青',
  name: 'cyan',
  color: '#1cbbb4'
},
{
  title: '海蓝',
  name: 'blue',
  color: '#0081ff'
},
{
  title: '姹紫',
  name: 'purple',
  color: '#6739b6'
},
{
  title: '木槿',
  name: 'mauve',
  color: '#9c26b0'
},
{
  title: '桃粉',
  name: 'pink',
  color: '#e03997'
},
{
  title: '棕褐',
  name: 'brown',
  color: '#a5673f'
},
{
  title: '墨黑',
  name: 'black',
  color: '#333333'
},
{
  title: '雅白',
  name: 'white',
  color: '#ffffff'
},
]

wepy.page({
  store,

  hooks: {
    // Page 级别 hook, 只对当前 Page 的 setData 生效。
  },
  //   mixins: [testMixin],
  data: {
    modalName: null,
    loading: false,
    animation: '',
    ColorList
  },

  async created () {
    // const { result } = await api.login({ user_name: 'shawn', pass: '12345' })
    // console.log(result);
  },

  computed: {

  },

  methods: {
    showModal (e) {
      console.log(e);
      this.modalName = e
    },
    hideModal (e) {
      this.modalName = null
    },
    start () {
      vibrate()
      this.animation = 'shake'
      this.modalName = 'bottomModal'
      setTimeout(() => {
        this.animation = ''
      }, 800);
    },
    selectLabel () {

    }
  },
  events: {},
});
</script>
 
<style lang='less' scoped>
@import url('~@/assets/colorui/main.wxss');
@import url('~@/assets/colorui/animation.wxss');
.daka-f-btn {
  border-radius: 50%;
  width: 120rpx;
  height: 120rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  bottom: 40rpx;
  left: 40rpx;
  .text {
    font-size: 27rpx;
  }
}

.DrawerPage {
  position: fixed;
  width: 100vw;
  height: 100vh;
  left: 0vw;
  background-color: #f1f1f1;
  transition: all 0.4s;
}

.DrawerPage.show {
  transform: scale(0.9, 0.9);
  left: 85vw;
  box-shadow: 0 0 60rpx rgba(0, 0, 0, 0.2);
  transform-origin: 0;
}

.DrawerWindow {
  position: absolute;
  width: 85vw;
  height: 100vh;
  left: 0;
  top: 0;
  transform: scale(0.9, 0.9) translateX(-100%);
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerWindow.show {
  transform: scale(1, 1) translateX(0%);
  opacity: 1;
  pointer-events: all;
}

.DrawerClose {
  position: absolute;
  width: 40vw;
  height: 100vh;
  right: 0;
  top: 0;
  color: transparent;
  padding-bottom: 30rpx;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.01), rgba(0, 0, 0, 0.6));
  letter-spacing: 5px;
  font-size: 50rpx;
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerClose.show {
  opacity: 1;
  pointer-events: all;
  width: 15vw;
  color: #fff;
}

.DrawerPage .cu-bar.tabbar .action button.icon {
  width: 64rpx;
  height: 64rpx;
  line-height: 64rpx;
  margin: 0;
  display: inline-block;
}

.DrawerPage .cu-bar.tabbar .action .cu-avatar {
  margin: 0;
}

.DrawerPage .nav {
  flex: 1;
}

.DrawerPage .nav .cu-item.cur {
  border-bottom: 0;
  position: relative;
}

.DrawerPage .nav .cu-item.cur::after {
  content: '';
  width: 10rpx;
  height: 10rpx;
  background-color: currentColor;
  position: absolute;
  bottom: 10rpx;
  border-radius: 10rpx;
  left: 0;
  right: 0;
  margin: auto;
}

.DrawerPage .cu-bar.tabbar .action {
  flex: initial;
}

.daka_start {
  position: relative;
  display: inline-block;
  border-radius: 50%;
  overflow: hidden;
  width: 200rpx;
  height: 200rpx;
  .daka_text {
    position: absolute;
    width: 100%;
    text-align: center;
    line-height: 200rpx;
  }
}
</style>
<config>
{
navigationBarTitleText: '',
usingComponents: {
 
}
}
</config>
