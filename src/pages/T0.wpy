<template>
  <block>
    <block v-if="done">
      <my-menu is="head" @action="menuAction"></my-menu>

      <div v-show="!showEditModal" class="content">
        <canvas canvas-id="{{canvasId}}" style="width: {{width*ratio*scale}}px; height: {{height*scale}}px;">

          <cover-view v-show="showEdit" style="{{'width:100%;height:'+height+'px;'}}" class="maskPanel">
            <!-- 蒙版 Start -->
            <cover-view @tap="edit('title')" style="{{'width:'+74+'px;height:'+40+'px;top: '+height*0.61+'px;left: '+34*ratio+'px;'}}"
              class="edit-title"></cover-view>
            <cover-view @tap="edit('desc')" style="{{'width:'+180+'px;height:'+50+'px;top: '+height*0.7+'px;left: '+34*ratio+'px;'}}"
              class="edit-title"></cover-view>
            <!-- 蒙版 End -->
          </cover-view>

        </canvas>
      </div>

      <my-menu v-if="audit" is="foot" :showModal="showEditModal" :text="editText" @modalReturn="editModalChange"
        @action="menuAction"></my-menu>
    </block>

  </block>
</template>
 
<script>
import wepy from '@wepy/core'
import store from '@/store'
import editMixin from '@/mixins/edit'
import api from '@/api'
import SimpleCanvas from '@/utils/plugins/canvasTool'

wepy.page({
  store,

  // hooks: {
  //   // Page 级别 hook, 只对当前 Page 的 setData 生效。
  // },
  mixins: [editMixin],
  data: {
    editImg: 'bgImg',
    temp: 'cloud://daka.6461-daka-1301019118/T-00-00.png',
    bgImg: 'cloud://daka.6461-daka-1301019118/T-00-01 (1).png',

    bgImg_width: 0,
    bgImg_height: 0,
    pre_width: 0,
    pre_height: 0,

    title: `旅途`,
    desc: '走上人生的旅途吧|前途很远，也很暗|然而不要怕，不怕的人面前才有路'
  },

  async created() {
    await this.init()
    this.draw(() => {
      this.done = true
    })
  },

  computed: {},

  methods: {
    async draw(cb) {
      wx.showLoading({ title: '努力加载中..' })
      const _this = this

      await this.prepareImg({
        qrcode: '03'
      })

      if (this.bgImg_width === 0) {
        const bgImg = await this.downloadCloud(this.bgImg)
        this.bgImg = bgImg.path
        _this.bgImg_width = bgImg.width
        _this.bgImg_height = bgImg.height
        _this.height = parseInt((bgImg.height * _this.wWidth) / bgImg.width)
      }

      if (this.pre_width === 0) {
        const preImg = await this.downloadCloud(this.temp)
        this.temp = preImg.path
        _this.pre_width = (preImg.width * _this.wWidth) / _this.bgImg_width
        _this.pre_height = parseInt(
          (preImg.height * _this.pre_width) / preImg.width
        )
      }

      const canvas = new SimpleCanvas({
        scale: this.scale,
        canvasId: this.canvasId
      })
      canvas
        .createArtboard({
          id: 'share',
          backgroundColor: '#ffffff',
          width: this.width * this.ratio,
          height: this.height
        })

        .drawWrapText({
          id: 'start',
          text: ' ',
          fontSize: 0,
          top: 0
        })
        .drawImage({
          id: 'bg',
          width: 375 * this.ratio + 2,
          height: this.height,
          path: this.bgImg,
          referLayer: {
            id: 'start',
            top: 0
          }
        })
        .drawImage({
          id: 'preBox',
          left: 13 * this.ratio,
          width: this.pre_width,
          height: this.pre_height,
          path: this.temp,
          referLayer: {
            id: 'bg',
            top: -(this.pre_height + 25 * this.ratio)
          }
        })
        .drawCircleImage({
          id: 'avatar',
          path: this.avatarUrl,
          left: 40 * this.ratio,
          d: 50,
          top: 380 * this.ratio
          // referLayer: {
          //   id: 'bg',
          //   top: 280
          // }
        })
        .drawWrapText({
          id: '#nickname',
          fontSize: 14,
          top: 385 * this.ratio,
          text: this.nickName,
          referLayer: {
            id: 'avatar',
            left: 16 * this.ratio
          }
        })
        .drawWrapText({
          id: '#guanjianci',
          fontSize: 14,
          color: '#999',
          top: 406 * this.ratio,
          text: '我今天的关键词是',
          referLayer: {
            id: 'avatar',
            left: 16 * this.ratio
          }
        })
        .drawWrapText({
          id: '#month',
          text: this.monthStr,
          fontSize: 16 * this.ratio,
          left: 294 * this.ratio,
          referLayer: {
            id: 'bg',
            top: -(284 * this.ratio)
          }
        })
        .createRectangle({
          id: '#line0',
          width: 40,
          height: 1,
          backgroundColor: '#000',
          left: 290 * this.ratio,
          referLayer: {
            id: '#month',
            top: 8
          }
        })
        .drawWrapText({
          id: '#day',
          text: this.date,
          fontSize: 38 * this.ratio,
          left: 290 * this.ratio,
          referLayer: {
            id: 'bg',
            top: -(264 * this.ratio)
          }
        })
        .createRectangle({
          id: '#line1',
          width: 40,
          height: 1,
          backgroundColor: '#000',
          left: 290 * this.ratio,
          referLayer: {
            id: '#day',
            top: 8
          }
        })
        .drawWrapText({
          id: '#year',
          text: this.year,
          fontSize: 18 * this.ratio,
          left: 288 * this.ratio,
          referLayer: {
            id: 'bg',
            top: -(216 * this.ratio)
          }
        })
        .drawWrapText({
          id: '#title',
          fontSize: 32 * this.ratio,
          left: 40 * this.ratio,
          text: this.title,
          referLayer: {
            id: 'bg',
            top: -(210 * this.ratio)
          }
        })
        .drawWrapText({
          id: '#contect',
          fontSize: 16 * this.ratio,
          lineHeight: 6,
          left: 40 * this.ratio,
          width: 230 * this.ratio,
          text: this.desc,
          referLayer: {
            id: 'bg',
            top: -(150 * this.ratio)
          }
        })
        .drawImage({
          id: 'qrcode',
          width: 64 * this.ratio,
          height: 64 * this.ratio,
          left: 285 * this.ratio,
          path: this.qrcode,
          referLayer: {
            id: 'bg',
            top: -(100 * this.ratio)
          }
        })
        .drawWrapText({
          id: '#note',
          text: '每/日/一/签',
          fontSize: 14 * this.ratio,
          left: 40 * this.ratio,
          referLayer: {
            id: 'bg',
            top: -(54 * this.ratio)
          }
        })

      if (cb) cb()
      canvas.draw(() => {
        setTimeout(() => {
          this.createPic(this)
        }, 10)
      })
    },
    // 设置随机文字出现位置
    randomText() {
      api.hitokoto().then(res => {
        this.desc = res.hitokoto
        this.draw()
      })
    }
  },
  events: {}
})
</script>
 
<style lang='less' scoped>
@import url('~@/assets/styles/edit.less');
.maskPanel {
  background: rgba(0, 0, 0, 0.24);
  position: absolute;
  width: 100%;
  top: 0;
  z-index: 99;
  .edit-title {
    background: rgba(255, 255, 255, 0.3);
    position: absolute;
    border: 2rpx dashed rgba(255, 255, 255, 1);
  }
}
</style>
<config>
{
navigationBarTitleText: '查看图签',
  usingComponents: {
    "my-menu": "../components/EditorMenu",
    "miniprogram-cropper": "module:miniprogram-cropper"
  }
}
</config>