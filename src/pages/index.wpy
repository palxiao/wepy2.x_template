
<wxs module="m1" lang="babel" src="../utils/widget/test.wxs"></wxs>
<template>
  <movable-area style="min-height:{{wHeight}}px;" class="container">

    <!-- <button class="head" open-type="getUserInfo" lang="zh_CN" bindgetuserinfo="onGotUserInfo">
      <div class="userinfo">
        <image class="userinfo-avatar" src="{{ userInfo.avatarUrl }}" background-size="cover" />
        <div class="userinfo-nickname">{{ userInfo.nickName }}</div>
      </div>
    </button> -->

    <!-- <my-swiper @tap="openEditor" @change="swiperChange" :imgUrls="imgUrls" /> -->
    <image mode="aspectFill" class="bg" style="min-height:{{wHeight}}px" src="../assets/images/bg00.png" />
    <image @tap="add" mode="aspectFit" class="title" src="../assets/images/title.png" />
    <div @tap="add" class="add"> + Ê∑ªÂä†ÁõÆÊ†á</div>
    <image class="bottom-image" mode="aspectFit" src="../assets/images/bg02.png" />

    <scroll-view scroll-y="true" class="content" style="height:{{wHeight*0.68}}px;">
      <!-- bindscrolltoupper="upper" bindscrolltolower="lower" bindscroll="scroll" scroll-into-view="{{toView}}" scroll-top="{{scrollTop}}" -->
      <!-- <checkbox-group bindchange="checkboxChange"> -->

      <div class="checkbox" v-if="!item.checked" v-for="(item,index) in items" :key="'do'+index" bindlongpress="_longtap"
        bindtouchstart="touchs" bindtouchend="touchend" bindtouchmove="touchm">
        <checkbox @tap="checkboxSelect(index)" :value="item.value" :checked="item.checked" />
        <input v-if="item.edit" class="defalut" :focus="item.edit" bindblur="blur(index)" v-model="item.value"
          :placeholder="pihua" />
        <text v-else @tap="edit(index)" class="{{item.checked?'del':'defalut'}}">{{item.value}}</text>
      </div>

      <!-- </checkbox-group> -->
      <div class="checkbox" v-if="ditem.checked" v-for="(ditem,dindex) in complete" :key="'done'+dindex">
        <checkbox @tap="checkboxSelect(dindex, true)" :value="ditem.value" :checked="ditem.checked" />
        <text class="{{ditem.checked?'del':'defalut'}}">{{ditem.value}}</text>
      </div>
    </scroll-view>

    <movable-view class="checkbox" style="background:red;width100rpx;height:100rpx;" :out-of-bounds="true" :x="x" :y="y" direction="vertical"
      :damping="5000" :friction="1" :disabled="disabled">
      <!-- :hidden="hidden" -->
      <view>sadsad</view>
    </movable-view>

    <!-- <official-account style="margin-top:40rpx;"></official-account> -->

  </movable-area>
</template>

<script>
import wepy from '@wepy/core'
import eventHub from '../utils/common/eventHub'
// import { mapState, mapActions } from '@wepy/x';
import store from '@/store'
// import testMixin from '../mixins/test';
import api from '@/api'
import { vibrate } from '@/utils'
const system = wx.getSystemInfoSync()
let elements = []
wepy.page({
  store,

  hooks: {
    // Page Á∫ßÂà´ hook, Âè™ÂØπÂΩìÂâç Page ÁöÑ setData ÁîüÊïà„ÄÇ
  },

  // mixins: [testMixin],

  data: {
    x: 0,
    y: 0,
    disabled: false,
    flag: false,
    hidden: true,
    pihua: 'ÊÄùËÄÉÁõÆÊ†áÂØπÊú™Êù•ÂèëÂ±ïÁöÑÂΩ±Âìç', // ÊØîÊñπËØ¥Ëµö‰ªñ‰∏Ä‰∏™‰∫ø
    wHeight: system.windowHeight,
    userInfo: {
      nickName: 'ËØ∑ÁôªÂΩï'
    },
    items: [
      { value: 'ÊùÄÊàÆÁ©∫Èó¥ÂõõÂ§ßÁöÜÁ©∫', checked: false, edit: false },
      {
        value: 'Á¨¨‰∏ÄÂè•Âìà‰∏™ÊàëË¶ÅÈªòËÆ§ÊµãËØïÁõÆÊ†á‰∏Ä‰∏™ÊàëË¶ÅÈªòËÆ§ÊµãËØïÁõÆÊ†á‰∏Ä‰∏™Ë¶Å',
        checked: false,
        edit: false
      },
      {
        value: 'Á¨¨‰∫åÂè•ËØù‰∏™ÊàëË¶ÅÈªòËÆ§ÊµãËØï‰∏Ä‰∏™ÊàëË¶ÅÈªòËÆ§ÊµãËØïÁõÆÊ†á‰∏Ä‰∏™ÊàëË¶Å',
        checked: false,
        edit: false
      }
    ],
    complete: [{ value: 'ÊùÄÊàÆÁ©∫Èó¥ÂõõÂ§ßÁöÜÁ©∫', checked: true, edit: false }]
  },

  created() {
    // var query = wx.createSelectorQuery()
    // var nodesRef = query.selectAll('.checkbox')
    // nodesRef
    //   .fields(
    //   {
    //     dataset: true,
    //     rect: true
    //   },
    //     result => {
    //       elements = result
    //     }
    //   )
    //   .exec()
    // api.test().then((res) => {
    //   console.log(res);
    // })

    this.getUser()
  },

  computed: {},

  methods: {
    // ÂàóË°®Êìç‰Ωú
    _longtap: function(e) {
      vibrate()
      e = e.$wx
      const detail = e.detail
      ;(this.x = e.currentTarget.offsetLeft),
        (this.y = e.currentTarget.offsetTop)

      this.hidden = false
      this.flag = true
    },
    touchs: function(e) {
      this.beginIndex = e.$wx.currentTarget.dataset.index
    },
    // Ëß¶Êë∏ÁªìÊùü
    touchend: function(e) {
      console.log('end ----- ')

      e = e.$wx
      if (!this.flag) {
        return
      }
      const x = e.changedTouches[0].pageX
      const y = e.changedTouches[0].pageY
      const list = elements
      let data = this.items
      for (var j = 0; j < list.length; j++) {
        const item = list[j]
        if (
          x > item.left &&
          x < item.right &&
          y > item.top &&
          y < item.bottom
        ) {
          const endIndex = item.dataset.index
          const beginIndex = this.beginIndex
          // ÂêëÂêéÁßªÂä®
          if (beginIndex < endIndex) {
            let tem = data[beginIndex]
            for (let i = beginIndex; i < endIndex; i++) {
              data[i] = data[i + 1]
            }
            data[endIndex] = tem
          }
          // ÂêëÂâçÁßªÂä®
          if (beginIndex > endIndex) {
            let tem = data[beginIndex]
            for (let i = beginIndex; i > endIndex; i--) {
              data[i] = data[i - 1]
            }
            data[endIndex] = tem
          }
console.log(data);

          this.items = data
        }
      }
      ;(this.hidden = true), (this.flag = false)
    },
    // ÊªëÂä®
    touchm: function(e) {
      e = e.$wx
      if (this.flag) {
        const x = e.touches[0].pageX
        const y = e.touches[0].pageY
        this.x = x
        this.y = y
      }
    },

    // ÂàóË°®Â¢ûÂà†Êîπ
    add() {
      this.items.push({ value: '', checked: false, edit: true })
    },
    checkboxChange(e) {
      console.log('checkboxÂèëÁîüchange‰∫ã‰ª∂ÔºåÊê∫Â∏¶valueÂÄº‰∏∫Ôºö', e.$wx.detail.value)
    },
    checkboxSelect(index, idDone) {
      if (idDone) {
        this.complete[index].checked = !this.complete[index].checked
        this.items.push(this.complete[index])
        wx.showLoading({ mask: true })
        setTimeout(() => {
          wx.hideLoading()
          this.complete.splice(index, 1)
        }, 800)
        return
      }
      this.items[index].checked = !this.items[index].checked
      this.complete.push(this.items[index])
      wx.showLoading({ mask: true })
      setTimeout(() => {
        wx.hideLoading()
        this.items.splice(index, 1)
      }, 800)
    },
    edit(index) {
      if (this.items[index]) this.items[index].edit = true
    },
    blur(index) {
      if (!this.items[index].value) {
        this.items.splice(index, 1)
        return
      }
      this.items[index].edit = false
    },
    // ...mapActions(['']) ,
    getUser() {
      const _this = this
      wx.getUserInfo({
        success(res) {
          _this.userInfo = res.userInfo
          _this.$app.$options.globalData.userInfo = res.userInfo
        }
      })
    },
    onGotUserInfo: e => {},
    authorize() {
      wx.navigateTo({
        url: 'authorization' // ÊéàÊùÉ
      })
    }
  },
  events: {}
})
</script>
<style lang="less">
@import url('../assets/styles/index.less');
.container {
  width: 100%;
}
.title {
  position: absolute;
  height: 306rpx;
  width: 100%;
}
.bg {
  position: absolute;
  width: 100%;
  opacity: 0.6;
}
.bottom-image {
  position: fixed;
  bottom: 0;
  height: 270rpx;
  width: 278rpx;
  left: 230rpx;
  opacity: 0.7;
}
.content {
  position: absolute;
  top: 325rpx;
  margin-left: 20rpx;
  .checkbox {
    width: 654rpx;
    display: block;
    padding: 18rpx 70rpx 18rpx 50rpx;
  }
  .defalut,
  .del {
    display: inline-block;
    vertical-align: top;
    margin-left: 20rpx;
    margin-top: 4rpx;
    width: 546rpx;
  }
  .del {
    text-decoration: line-through;
    color: rgba(0, 0, 0, 0.4);
  }
}
.add {
  position: absolute;
  left: 200rpx;
  top: 200rpx;
  color: rgba(0, 0, 0, 0.7);
}
</style>
<config>
{
    navigationBarTitleText: 'üê∏',
    usingComponents: {
      "my-swiper": "~@/components/common/Swiper",
    }
}
</config>
