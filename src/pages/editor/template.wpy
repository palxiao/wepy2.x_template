<template>
    <div v-if="done">
        <my-menu is="head" @action="menuAction"></my-menu>

        <div v-show="!showEditModal" class="content">
            <canvas canvas-id="{{canvasId}}" style="width: {{width*ratio*scale}}px; height: {{height*scale}}px;">

                <cover-view v-show="showEdit" style="{{'height:'+height*scale+'px;'}}" class="maskPanel">
                    <cover-view v-if="title" @tap="edit('title')" style="{{'width:'+74+'px;height:'+40+'px;top: '+height*0.61+'px;left: '+34*ratio+'px;'}}" class="edit-title"></cover-view>
                    <cover-view v-if="desc" @tap="edit('desc')" style="{{'width:'+descPositionWidth+'px;top: '+descPositionTop+'px;left: '+descPositionLeft+'px;'}}" class="edit-title">点击编辑</cover-view>
                </cover-view>

            </canvas>
        </div>

        <my-menu v-if="audit" is="foot" :showModal="showEditModal" :text="editText" @modalReturn="editModalChange" @action="menuAction"></my-menu>

    </div>
</template>
 
<script>
import wepy from '@wepy/core'
import store from '@/store'
import editMixin from '@/mixins/edit'
import api from '@/api'
import SimpleCanvas from '@/common/plugins/canvasTool'
// import { stringifyArray } from '@/common/utils'
let imgsData = {}
let drawData = []

wepy.page({
    store,
    mixins: [editMixin],
    data: {
        title: null,
        desc: null,
        descPositionTop: 0,
        descPositionLeft: 0,
        descPositionWidth: 0
    },

    created() { },
    async onLoad({ id }) {
        await this.init()
        // 请求数据
        let res = await api.makingData({ id })
        res = res.result[0]
        // 解析配置信息
        res.config = JSON.parse(res.config)
        for (const key in res.config) {
            if (res.config.hasOwnProperty(key)) {
                this[key] = res.config[key] || '_' + key
            }
        }
        console.log(res.config)
        // 解析图片数据
        imgsData = JSON.parse(res.imgs_data)
        for (const key in imgsData) {
            if (imgsData.hasOwnProperty(key)) {
                this[key] = imgsData[key]
                this[key + '_width'] = 0
                this[key + '_height'] = 0
            }
        }
        console.log(imgsData)
        // 解析绘图数据
        // drawData = res.draw_data.split('_*_').map(x => {
        //     return JSON.parse(x)
        // })
        drawData = JSON.parse(res.draw_data)
        console.log(drawData)
        // 开始绘图
        this.draw(() => {
            this.done = true
        })
    },

    computed: {},

    methods: {
        async draw(cb) {
            wx.showLoading({ title: '努力加载中..' })
            // 准备头像二维码等资源
            await this.prepareImg()
            // 渲染底层基准图片/整体背景
            await this.prepareBg()
            // 循环加载图片资源
            for (const key in imgsData) {
                if (imgsData.hasOwnProperty(key)) {
                    await this.referLoadImg(key)
                }
            }
            // 创建canvas准备
            const canvas = new SimpleCanvas({
                scale: this.scale,
                canvasId: this.canvasId
            })
            // 创建背景/底部基准
            canvas.drawImage({
                id: 'basis_' + this.basisImg,
                width: 375 * this.ratio + 2,
                height: this.height,
                path: this[this.basisImg]
            })
            // 渲染绘制整图
            for (let i = 0; i < drawData.length; i++) {
                const item = drawData[i]
                const params = {
                    id: '#' + item.name,
                    top: item.top * this.ratio,
                    left: item.left * this.ratio
                }
                if (item.fontSize) {
                    params.fontSize = item.fontSize * this.ratio
                }
                if (item.color) {
                    params.color = item.color
                }
                if (item.text) {
                    params.text = this[item.text]
                    if (item.text === 'desc') { // 编辑框提示位置
                        this.descPositionTop = item.top * this.ratio,
                        this.descPositionLeft = item.left * this.ratio,
                        this.descPositionWidth = item.width * this.ratio - 40
                    }
                }
                if (item.lineHeight) {
                    params.lineHeight = item.lineHeight * this.ratio
                }
                if (this[item.name]) {
                    params.path = this[item.name]
                    params.width = this[item.name + '_width'] * (item.zoom || 1)
                    params.height = this[item.name + '_height'] * (item.zoom || 1)
                }
                if (item.width) {
                    params.width = item.width * this.ratio
                }
                if (item.height) {
                    params.height = item.height * this.ratio
                }
                canvas[item.fn](params)
            }
            // 结束回调小程序生成图片
            if (cb) cb()
            canvas.draw(() => {
                setTimeout(() => {
                    this.createPic(this)
                }, 10)
            })
        },
        // 设置随机文字出现位置
        randomText() {
            api.hitokoto().then(res => {
                this.desc = res.hitokoto
                this.draw()
            })
        }
    },
    events: {}
})
</script>
 
<style lang='less' scoped>
@import url('~@/assets/styles/edit.less');
.temp-mask {
  position: absolute;
  background: #ffffff;
  .bg {
    width: 100%;
    height: 100%;
  }
}
</style>
<config>
{
navigationBarTitleText: '制作图签',
  usingComponents: {
    "my-menu": "~@/components/bussiness/EditorMenu",
  }
}
</config>
