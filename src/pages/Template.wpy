<template>
  <div v-if="done">
    <my-menu is="head" @action="menuAction"></my-menu>

    <div v-show="!showEditModal" class="content">
      <canvas canvas-id="{{canvasId}}" style="width: {{width*ratio*scale}}px; height: {{height*scale}}px;">

        <cover-view v-show="showEdit" style="{{'height:'+height*scale+'px;'}}" class="maskPanel">
          <!-- 编辑蒙版预设 Start -->
          <cover-view @tap="edit('title')" style="{{'width:'+74+'px;height:'+40+'px;top: '+height*0.61+'px;left: '+34*ratio+'px;'}}"
            class="edit-title"></cover-view>
          <cover-view @tap="edit('desc')" style="{{'width:'+280+'px;height:'+50+'px;top: '+height*0.7+'px;left: '+34*ratio+'px;'}}"
            class="edit-title"></cover-view>
          <!-- 蒙版 End -->
        </cover-view>

      </canvas>

      <!-- <div style="width: {{width*ratio*scale}}px; height: {{height*scale}}px;" class="temp-mask">
        <image class="bg" :src="bgImg" />
        <image style="left: {{68}}px;top: {{139}}px;width:{{newOne_width/2}}px;height:{{newOne_height/2}}px;position:absolute;" :src="newOne" />
        <image style="top:{{121}}px;position:absolute;left:0;width:{{main_width/2}}px;height:{{main_height/2}}px;" class="main" :src="main" />
        <image style="left: {{50}}px;top: {{18}}px;width:{{dateImg_width/2.4}}px;height:{{dateImg_height/2.4}}px;position:absolute;" :src="dateImg" />
      </div> -->
    </div>

    <my-menu v-if="audit" is="foot" :showModal="showEditModal" :text="editText" @modalReturn="editModalChange" @action="menuAction"></my-menu>

  </div>
</template>
 
<script>
import wepy from '@wepy/core'
import store from '@/store'
import editMixin from '@/mixins/edit'
import api from '@/api'
import SimpleCanvas from '@/utils/plugins/canvasTool'
let drawData = []
let imgsData = {}
let textData = {}

wepy.page({
  store,
  // hooks: {
  //   // Page 级别 hook, 只对当前 Page 的 setData 生效。
  // },
  mixins: [editMixin],
  data: {
    title: '',
    desc: ''
  },

  created() {},
  async onLoad(options) {
    await this.init()
    console.log(options)
    setTimeout(() => {
      this.basisImg = 'bgImg' // 选择修改的图片
      this.editImg = 'newOne' // 底图基准图片(图片比例大小参照图)

      for (const key in imgsData) {
        if (imgsData.hasOwnProperty(key)) {
          this[key] = imgsData[key]
          this[key + '_width'] = 0
          this[key + '_height'] = 0
        }
      }

      imgsData = {
        bgImg: 'cloud://daka.6461-daka-1301019118/XC/XC-00.png',
        dateImg: 'cloud://daka.6461-daka-1301019118/XC/XC-02.png',
        main: 'cloud://daka.6461-daka-1301019118/XC/XC-01.png',
        newOne: 'cloud://daka.6461-daka-1301019118/XC/XC-03.png'
        // bless: 'cloud://daka.6461-daka-1301019118/XC/XC-04.png'
      }
      for (const key in imgsData) {
        if (imgsData.hasOwnProperty(key)) {
          this[key] = imgsData[key]
          this[key + '_width'] = 0
          this[key + '_height'] = 0
        }
      }

      drawData = [
        {
          fn: 'drawImage',
          name: 'newOne',
          top: 139 + 45,
          left: 68,
          zoom: 1.01
        },
        {
          fn: 'drawImage',
          name: 'main',
          top: 121 + 47,
          left: 0
        },
        {
          fn: 'drawImage',
          name: 'dateImg',
          top: 18 + 18,
          left: 50 - 18
        },
        {
          fn: 'drawWrapText',
          name: 'bless',
          fontSize: 20,
          text: '测试',
          top: 0,
          left: 0
        }
      ]

      this.draw(() => {
        this.done = true
      })
    }, 100)
  },

  computed: {},

  methods: {
    async draw(cb) {
      wx.showLoading({ title: '努力加载中..' })
      const _this = this
      // 准备头像二维码等资源
      await this.prepareImg()
      // 渲染底层基准图片/整体背景
      await this.prepareBg()
      // 循环加载图片资源
      for (const key in imgsData) {
        if (imgsData.hasOwnProperty(key)) {
          await this.referLoadImg(key)
        }
      }
      // 创建canvas准备
      const canvas = new SimpleCanvas({
        scale: this.scale,
        canvasId: this.canvasId
      })
      // 创建背景/底部基准
      canvas.drawImage({
        id: 'basis_' + this.basisImg,
        width: 375 * this.ratio + 2,
        height: this.height,
        path: this[this.basisImg]
      })
      // 渲染绘制整图
      for (let i = 0; i < drawData.length; i++) {
        const item = drawData[i]
        canvas[item.fn]({
          id: '#' + item.name,
          path: this[item.name],
          width: this[item.name + '_width'] * (item.zoom || 1),
          height: this[item.name + '_height'] * (item.zoom || 1),
          top: item.top * this.ratio,
          left: item.left * this.ratio,
          // fontSize: item.fontSize ? item.fontSize : null,
          // text: item.text ? item.text : null
        })
      }
      // 结束回调小程序生成图片
      if (cb) cb()
      canvas.draw(() => {
        setTimeout(() => {
          this.createPic(this)
        }, 10)
      })
    },
    // 设置随机文字出现位置
    randomText() {
      api.hitokoto().then(res => {
        this.desc = res.hitokoto
        this.draw()
      })
    }
  },
  events: {}
})
</script>
 
<style lang='less' scoped>
@import url('~@/assets/styles/edit.less');
.temp-mask {
  position: absolute;
  background: #ffffff;
  .bg {
    width: 100%;
    height: 100%;
  }
}
</style>
<config>
{
navigationBarTitleText: '查看图签',
  usingComponents: {
    "my-menu": "../components/EditorMenu",
  }
}
</config>